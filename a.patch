diff --git a/ats/pql/pql.py b/ats/pql/pql.py
index 1d4d540..0469116 100644
--- a/ats/pql/pql.py
+++ b/ats/pql/pql.py
@@ -1,6 +1,9 @@
+from typing import Union
+
 from ats.parser.parser import parse
 from ats.parser.utils import is_integer_token, is_name_token
 from ats.pql.utils import (
+    define_relationship,
     is_any_token,
     is_program_design_entity_relationship_token,
     is_string_token,
@@ -31,13 +34,26 @@ relationships_stmt_ref_and_stmt_ref = [
 ]
 relationships_ent_ref_and_ent_ref = ["Calls", "Calls*"]

+define_relationship("Modifies", ["procedure", "variable"])
+define_relationship("Modifies", ["stmt", "variable"])
+define_relationship("Uses", ["procedure", "variable"])
+define_relationship("Uses", ["stmt", "variable"])
+define_relationship("Calls", ["procedure", "procedure"])
+define_relationship("Calls*", ["procedure", "procedure"])
+define_relationship("Parent", ["stmt", "stmt"])
+define_relationship("Parent*", ["stmt", "stmt"])
+define_relationship("Follows", ["stmt", "stmt"])
+define_relationship("Follows*", ["stmt", "stmt"])
+define_relationship("Next", ["prog_line", "prog_line"])
+define_relationship("Next*", ["prog_line", "prog_line"])
+

 def parse_query(text: str):
     tokens = tokenize(text)
     current_token = None
     line_number = 1

-    def get_next_token():
+    def get_next_token() -> Union[str, None]:
         nonlocal line_number

         while len(tokens) > 0 and tokens[0] == "\n":
@@ -72,7 +88,7 @@ def parse_query(text: str):
         var_type = current_token
         if not is_variable_type_token(current_token):
             raise ValueError(
-                rf"Token '{current_token}' is not a valid VARIABLE_TYPE_TOKEN\mon line: {line_number}"
+                f"Token '{current_token}' is not a valid VARIABLE_TYPE_TOKEN\non line: {line_number}"
             )

         current_token = get_next_token()
@@ -109,23 +125,18 @@ def parse_query(text: str):
         assert_token("DESIGN_ENTITY_RELATIONSHIP_TOKEN")
         nonlocal current_token

-        if not is_program_design_entity_relationship_token(current_token):
-            raise ValueError(
-                f"Token '{current_token}' is not a valid NAME_TOKEN\non line: {line_number}"
-            )
-
         relationship = current_token
-
         current_token = get_next_token()
-        if current_token == "*":
-            if relationship in shallow_relationship:
-                raise ValueError(
-                    f"Token '{relationship}*' is not a valid NAME_TOKEN\non line: {line_number}"
-                )

+        if current_token == "*":
             relationship += "*"
             current_token = get_next_token()

+        if not is_program_design_entity_relationship_token(relationship):
+            raise ValueError(
+                f"Token '{current_token}' is not a valid RELATIONSHIP_NAME\non line: {line_number}"
+            )
+
         return relationship

     def match_end_of_declaration_token():
diff --git a/ats/pql/utils.py b/ats/pql/utils.py
index c2b4689..0525096 100644
--- a/ats/pql/utils.py
+++ b/ats/pql/utils.py
@@ -19,10 +19,6 @@ def is_variable_type_token(text: str):
     ]


-def is_program_design_entity_relationship_token(text: str):
-    return text in ["Modifies", "Follows", "Parent", "Uses", "Calls", "Next"]
-
-
 def is_string_token(text: str):
     return bool(re.match(r'^"[^"]*"$', text))

@@ -31,18 +27,15 @@ def is_any_token(text: str):
     return text == "_"


-# def is_term_token(text: str):
-#     if is_factor_token(text):
-#         return True
+DEFINED_RELATIONSHIPS = {}


-# def is_factor_token(text: str):
-#     if is_variable_type_token(text):
-#         return True
-#     if is_string_token(text):
-#         return True
-#     if is_any_token(text):
-#         return True
-#     if is_number_token(text):
-#         return True
-#     return False
+def define_relationship(name, args):
+    for arg in args:
+        if not is_variable_type_token(arg):
+            raise ValueError(f"Invalid argument {arg} for relationship {name}.")
+    DEFINED_RELATIONSHIPS[name] = args
+
+
+def is_program_design_entity_relationship_token(text: str):
+    return text in DEFINED_RELATIONSHIPS.keys()
diff --git a/tests/pql/test_pql_modifies.py b/tests/pql/test_pql_modifies.py
index 42b5020..84778f4 100644
--- a/tests/pql/test_pql_modifies.py
+++ b/tests/pql/test_pql_modifies.py
@@ -46,10 +46,10 @@ def test_not_valid_relation_second_parameter_modifies_in_query():

 def test_not_valid_relation_modifies_star_in_query():
     with pytest.raises(
-        ValueError, match="Token 'Modifies\\*' is not a valid NAME_TOKEN"
+        ValueError, match="Token 'Modifies\\*' is not a valid RELATIONSHIP"
     ):
         parse_query(
             """ stmt s1;
                 Select s1 such that Modifies*(s1, 4)
-               """
+            """
         )
